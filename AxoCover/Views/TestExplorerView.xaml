<views:View x:Class="AxoCover.Views.TestExplorerView" x:TypeArguments="viewModels:TestExplorerViewModel"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
            xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.11.0"
            xmlns:converters="clr-namespace:AxoCover.Converters"
            xmlns:models="clr-namespace:AxoCover.Models"
            xmlns:viewModels="clr-namespace:AxoCover.ViewModels"
            xmlns:views="clr-namespace:AxoCover.Views"
            xmlns:controls="clr-namespace:AxoCover.Controls"
            xmlns:win="clr-namespace:System.Windows;assembly=PresentationFramework"
            xmlns:res="clr-namespace:AxoCover"
            mc:Ignorable="d" d:DesignHeight="300" d:DesignWidth="300">
  <UserControl.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <converters:NotNullToBooleanConverter x:Key="NotNullToBooleanConverter"/>
    <converters:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
    <converters:BooleanToOpacityConverter x:Key="BooleanToOpacityConverter"/>
    <converters:InvertedBooleanToVisibilityConverter x:Key="InvertedBooleanToVisibilityConverter"/>

    <HierarchicalDataTemplate x:Key="TestItemTemplate" DataType="{x:Type viewModels:TestItemViewModel}" ItemsSource="{Binding Children}">
      <Border Background="Transparent">
        <Border.InputBindings>
          <MouseBinding MouseAction="LeftDoubleClick" 
                        Command="{Binding DataContext.NavigateToTestItemCommand, Source={x:Reference _testTreeView}}"
                        CommandParameter="{Binding CodeItem}"/>
        </Border.InputBindings>
        <DockPanel Margin="1,3">
          <Grid DockPanel.Dock="Left" Margin="0,0,3,0" Opacity="{Binding IsStateUpToDate, Converter={StaticResource BooleanToOpacityConverter}}">
            <Image Source="{Binding IconPath}" Stretch="None"/>
            <Image Stretch="Uniform" Width="9" VerticalAlignment="Bottom" HorizontalAlignment="Right"
                   Source="{Binding OverlayIconPath}" 
                   Visibility="{Binding OverlayIconPath, Converter={StaticResource NullToVisibilityConverter}}"/>
          </Grid>
          <Label x:Name="_testCountIndicator" DockPanel.Dock="Right" Margin="3,0,0,0"
                 Content="{Binding CodeItem.TestCount}" ContentStringFormat="({0})"/>
          <Label Content="{Binding CodeItem.Name}"/>
        </DockPanel>
      </Border>
      <HierarchicalDataTemplate.Triggers>
        <DataTrigger Binding="{Binding CodeItem.Kind}" Value="Method">
          <Setter TargetName="_testCountIndicator" Property="Visibility" Value="Collapsed"/>
        </DataTrigger>
      </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate x:Key="ResultItemTemplate" DataType="{x:Type viewModels:CoverageItemViewModel}" ItemsSource="{Binding Children}">
      <Border Background="Transparent">
        <Border.InputBindings>
          <MouseBinding MouseAction="LeftDoubleClick" 
                        Command="{Binding DataContext.NavigateToCoverageItemCommand, Source={x:Reference _testTreeView}}"
                        CommandParameter="{Binding CodeItem}"/>
        </Border.InputBindings>
        <DockPanel Margin="1,3">
          <Image Source="{Binding IconPath}" Margin="0,0,3,0" DockPanel.Dock="Left"/>
          <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
            <Image Source="/AxoCover;component/Resources/branch.png" Stretch="Uniform" Width="9" Margin="3,0,0,0"/>
            <Label Content="{Binding BranchCoverage}" ContentStringFormat="{}{0:F2}%" Margin="3,0,0,0"/>
            <Label Content="{Binding UncoveredBranchPoints}" ContentStringFormat="{}({0})" Margin="3,0,0,0"/>
            <Image Source="/AxoCover;component/Resources/sequence.png" Stretch="Uniform" Width="9" Margin="3,0,0,0"/>
            <Label Content="{Binding SequenceCoverage}" ContentStringFormat="{}{0:F2}%" Margin="3,0,0,0"/>
            <Label Content="{Binding UncoveredSequencePoints}" ContentStringFormat="{}({0})" Margin="3,0,0,0"/>
          </StackPanel>
          <Label Content="{Binding CodeItem.Name}"/>
        </DockPanel>
      </Border>
    </HierarchicalDataTemplate>

    <Style x:Key="TabIcon" TargetType="Image">
      <Setter Property="Stretch" Value="Uniform"/>
      <Setter Property="Width" Value="32"/>
      <Setter Property="Height" Value="32"/>
      <Setter Property="Margin" Value="8"/>
      <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="TabText" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
      <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
  </UserControl.Resources>

  <Grid>
    <Border x:Name="_dataContextSource"/>
    
    <DockPanel VerticalAlignment="Center" HorizontalAlignment="Center">
      <Label Content="{x:Static res:Resources.Introduction}" DockPanel.Dock="Bottom" HorizontalAlignment="Center"/>
      <Viewbox Stretch="Uniform" Margin="12">
        <DockPanel>
          <TextBlock FontSize="48" DockPanel.Dock="Bottom" VerticalAlignment="Bottom" HorizontalAlignment="Center"
                     TextOptions.TextFormattingMode="Ideal">
            <Run Text="Axo"/><Run Text="Cover" FontWeight="Bold"/>
          </TextBlock>
          <Path Stretch="Uniform" Opacity="0.2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="24,12"
                Fill="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}" 
                Data="F1 M 0,-50.007C -27.6181,-50.007 -50.007,-27.6181 -50.007,0C -50.007,19.3237 -39.0465,36.0875 -23.0032,44.4137L -23.0032,69.8647L -124.226,245.188L -146.164,257.854C -153.923,252.904 -163.138,250.035 -173.024,250.035C -200.642,250.035 -223.031,272.424 -223.031,300.042C -223.031,327.66 -200.642,350.049 -173.024,350.049C -145.406,350.049 -123.017,327.66 -123.017,300.042C -123.017,299.239 -123.036,298.44 -123.073,297.646L -101.23,285.035L 101.198,285.017L 123.073,297.646C 123.036,298.44 123.017,299.239 123.017,300.042C 123.017,327.66 145.406,350.049 173.024,350.049C 200.642,350.049 223.031,327.66 223.031,300.042C 223.031,272.424 200.642,250.035 173.024,250.035C 163.138,250.035 153.923,252.904 146.164,257.854L 124.311,245.237L 23.0032,69.767L 23.0032,44.4137C 39.0465,36.0876 50.007,19.3237 50.007,0C 50.007,-27.6181 27.6181,-50.007 0,-50.007 Z M 0,-80.0108C 44.1889,-80.0108 80.0111,-44.1885 80.0111,0.000366211C 80.0111,24.1967 69.2706,45.8845 52.2971,60.5561L 146.89,224.396C 155.08,221.567 163.873,220.031 173.024,220.031C 217.213,220.031 253.035,255.853 253.035,300.042C 253.035,344.231 217.213,380.053 173.024,380.053C 133.963,380.053 101.439,352.062 94.417,315.044L -94.4171,315.044C -101.439,352.062 -133.963,380.053 -173.024,380.053C -217.213,380.053 -253.035,344.231 -253.035,300.042C -253.035,255.853 -217.213,220.031 -173.024,220.031C -163.866,220.031 -155.067,221.569 -146.872,224.402L -52.2823,60.5689C -69.2644,45.8971 -80.0111,24.2037 -80.0111,0.000366211C -80.0111,-44.1886 -44.1889,-80.0108 0,-80.0108 Z ">
          </Path>
        </DockPanel>
      </Viewbox>
    </DockPanel>

    <DockPanel Visibility="{Binding IsSolutionLoaded, Converter={StaticResource BooleanToVisibilityConverter}}"
               Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}">     

      <!-- Status bar -->
      <Grid DockPanel.Dock="Bottom" Background="{DynamicResource {x:Static vsui:EnvironmentColors.CommandBarGradientBrushKey}}">
        <Label Content="{Binding StatusMessage}" VerticalAlignment="Center" Margin="3"/>
        <ProgressBar x:Name="_progressBar" Height="3" VerticalAlignment="Bottom"
                     Background="Transparent" BorderThickness="0" 
                     IsIndeterminate="{Binding IsProgressIndeterminate}"
                     Value="{Binding Progress}" Maximum="1"
                     Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
      </Grid>

      <!-- Main view -->
      <Grid>
        <TabControl TabStripPlacement="Left">
          <!-- Filtered view template -->
          <TabControl.ContentTemplateSelector>
            <models:TypeTemplateSelector>
              <models:TypeTemplateSelector.Templates>
                <DataTemplate DataType="viewModels:TestStateGroupViewModel">
                  <DockPanel>
                    <views:TestDetailsView SelectedItem="{Binding SelectedItem, ElementName=_listBox}" DockPanel.Dock="Bottom"/>
                    <ListBox x:Name="_listBox" Background="Transparent"
                             ItemsSource="{Binding Items}"
                             ItemTemplate="{StaticResource TestItemTemplate}"/>
                  </DockPanel>
                </DataTemplate>
              </models:TypeTemplateSelector.Templates>
            </models:TypeTemplateSelector>
          </TabControl.ContentTemplateSelector>
          
          <TabControl.ItemTemplate>
            <DataTemplate>
              <StackPanel>
                <Image x:Name="_tabIcon" Style="{StaticResource TabIcon}"/>
                <Label Content="{Binding Count}" Style="{StaticResource TabText}"/>
              </StackPanel>
              <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding State}" Value="Passed">
                  <Setter TargetName="_tabIcon" Property="Source" Value="{DynamicResource PassedIcon}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding State}" Value="Inconclusive">
                  <Setter TargetName="_tabIcon" Property="Source" Value="{DynamicResource WarningIcon}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding State}" Value="Error">
                  <Setter TargetName="_tabIcon" Property="Source" Value="{DynamicResource ErrorIcon}"/>
                </DataTrigger>
              </DataTemplate.Triggers>
            </DataTemplate>            
          </TabControl.ItemTemplate>
          
          <TabControl.ItemsSource>
            <CompositeCollection>
              <!-- Tests view -->
              <TabItem IsSelected="{Binding IsTestsTabSelected}">
                <TabItem.Header>
                  <StackPanel>
                    <Image Source="{DynamicResource TestsIcon}" Style="{StaticResource TabIcon}"/>
                    <Label Content="{x:Static res:Resources.TestsHeader}" Style="{StaticResource TabText}"/>
                  </StackPanel>
                </TabItem.Header>
                
                <DockPanel>
                  <!-- Toolbar -->
                  <ToolBar DockPanel.Dock="Top">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <UniformGrid Rows="1"/>
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <controls:ActionButton Text="{x:Static res:Resources.RunTests}" Icon="/AxoCover;component/Resources/test.png" Command="{Binding RunTestsCommand}" Visibility="{Binding IsNotTesting, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <controls:ActionButton Text="{x:Static res:Resources.AbortTests}" Icon="/AxoCover;component/Resources/abortTests.png" Command="{Binding AbortTestsCommand}" Visibility="{Binding IsTesting, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <controls:ActionButton Text="{x:Static res:Resources.BuildAndRefresh}" Icon="/AxoCover;component/Resources/refresh.png" Command="{Binding BuildCommand}"/>
                    <controls:ActionButton Text="{x:Static res:Resources.ExpandAll}" Icon="/AxoCover;component/Resources/expand.png" Command="{Binding ExpandAllCommand}"
                                           Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
                    <controls:ActionButton Text="{x:Static res:Resources.CollapseAll}" Icon="/AxoCover;component/Resources/collapse.png" Command="{Binding CollapseAllCommand}"
                                           Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource InvertedBooleanToVisibilityConverter}}"/>
                  </ToolBar>

                  <controls:SearchBox DockPanel.Dock="Top" x:Name="_searchBox"
                                      PlaceholderText="{x:Static res:Resources.TestSearchPlaceholder}"
                                      Text="{Binding FilterText, UpdateSourceTrigger=PropertyChanged}"
                                      TextChanged="OnSearchTextChanged"/>
                  <views:TestDetailsView DockPanel.Dock="Bottom" SelectedItem="{Binding SelectedItem}"/>
                  <Grid>
                    <TreeView x:Name="_testTreeView" Background="Transparent" BorderThickness="0" SelectedItemChanged="OnSelectedItemChanged"
                              ItemsSource="{Binding TestSolution.Children}" 
                              ItemTemplate="{StaticResource TestItemTemplate}">
                      <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                          <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>                          
                          <EventSetter Event="Selected" Handler="OnItemSelected"/>
                        </Style>
                      </TreeView.ItemContainerStyle>
                    </TreeView>
                    <ListBox ItemsSource="{Binding TestList}"
                             ItemTemplate="{StaticResource TestItemTemplate}"
                             SelectedItem="{Binding SelectedItem}"
                             Visibility="{Binding IsFiltering, Source={x:Reference _searchBox}, Converter={StaticResource BooleanToVisibilityConverter}}">
                      <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                          <EventSetter Event="Selected" Handler="OnItemSelected"/>
                        </Style>
                      </ListBox.ItemContainerStyle>
                    </ListBox>
                  </Grid>
                </DockPanel>
              </TabItem>

              <!-- Filtered views -->
              <CollectionContainer Collection="{Binding DataContext.StateGroups, Source={x:Reference _dataContextSource}}"/>

              <!-- Coverage view -->
              <TabItem Visibility="{Binding ResultSolution, Converter={StaticResource NullToVisibilityConverter}}">
                <TabItem.Header>
                  <StackPanel>
                    <Image Source="{DynamicResource CoverageIcon}" Style="{StaticResource TabIcon}"/>
                    <Label Content="{x:Static res:Resources.CoverageHeader}" Style="{StaticResource TabText}"/>
                  </StackPanel>
                </TabItem.Header>

                <TreeView x:Name="_resultTreeView" BorderThickness="0"
                          Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                          ItemsSource="{Binding ResultSolution.Children}" 
                          ItemTemplate="{StaticResource ResultItemTemplate}">
                  <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                      <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                      <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    </Style>
                  </TreeView.ItemContainerStyle>
                </TreeView>
              </TabItem>

              <!-- Settings view -->
              <TabItem IsSelected="{Binding IsSettingsTabSelected}">
                <TabItem.Header>
                  <StackPanel>
                    <Image Source="{DynamicResource SettingsIcon}" Style="{StaticResource TabIcon}"/>
                    <Label Content="{x:Static res:Resources.SettingsHeader}" Style="{StaticResource TabText}"/>
                  </StackPanel>
                </TabItem.Header>

                <ScrollViewer Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                              VerticalScrollBarVisibility="Auto">
                  <StackPanel Margin="6">
                    <Label Content="{x:Static res:Resources.GeneralSettings}"/>
                    <CheckBox Content="{x:Static res:Resources.ShowCoverage}" IsChecked="{Binding IsHighlighting}" Margin="3"/>
                    <CheckBox Content="{x:Static res:Resources.AutoCover}" IsChecked="{Binding IsAutoCoverEnabled}" Margin="3"/>

                    <Label Content="{x:Static res:Resources.OutputDirectories}" Margin="0,12,0,0"/>
                    <ItemsControl ItemsSource="{Binding TestSolution.Children}" Margin="0,6,0,0">
                      <ItemsControl.ItemTemplate>
                        <DataTemplate>
                          <DockPanel HorizontalAlignment="Left" Margin="3,0">
                            <controls:ActionButton x:Name="_cleanButton" DockPanel.Dock="Right" Margin="3,0,0,0"
                                                   Text="{Binding Output.Size, StringFormat={}{0:F2} MB}"
                                                   Icon="/AxoCover;component/Resources/clean.png"
                                                   CommandParameter="{Binding Output}"
                                                   Command="{Binding DataContext.CleanTestOutputCommand, Source={x:Reference _dataContextSource}}"
                                                   IsEnabled="{Binding Output, Converter={StaticResource NotNullToBooleanConverter}}"/>
                            <controls:ActionButton DockPanel.Dock="Right" Margin="3,0,0,0"
                                                   Icon="/AxoCover;component/Resources/open.png"
                                                   CommandParameter="{Binding CodeItem.OutputDirectory}"
                                                   Command="{Binding DataContext.OpenPathCommand, Source={x:Reference _dataContextSource}}"/>
                            <TextBlock VerticalAlignment="Center" TextTrimming="CharacterEllipsis">
                              <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0} - {1}">
                                  <Binding Path="CodeItem.Name"/>
                                  <Binding Path="CodeItem.OutputDirectory"/>
                                </MultiBinding>
                              </TextBlock.Text>
                            </TextBlock>
                          </DockPanel>
                          <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Output, Converter={StaticResource NotNullToBooleanConverter}}" Value="False">
                              <Setter TargetName="_cleanButton" Property="Text" Value="{x:Static res:Resources.CalculatingOutputSize}"/>
                            </DataTrigger>
                          </DataTemplate.Triggers>
                        </DataTemplate>
                      </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock Margin="0,12,0,0" Text="{x:Static res:Resources.TestSettings}" VerticalAlignment="Center"/>
                    <StackPanel Margin="0,3,0,0">
                      <ListBox ItemsSource="{Binding TestSettingsFiles}"
                               SelectedValue="{Binding SelectedTestSettings}"
                               ItemContainerStyle="{StaticResource RadioButtonItemStyle}">
                        <ListBox.ItemTemplate>
                          <DataTemplate>
                            <DockPanel>
                              <controls:ActionButton Icon="/AxoCover;component/Resources/open.png" DockPanel.Dock="Right"
                                                     CommandParameter="{Binding}"
                                                     Command="{Binding DataContext.NavigateToFileCommand, Source={x:Reference _dataContextSource}}"/>
                              <TextBlock TextTrimming="CharacterEllipsis" Text="{Binding}" VerticalAlignment="Center"/>
                            </DockPanel>
                          </DataTemplate>
                        </ListBox.ItemTemplate>
                      </ListBox>
                      <RadioButton Margin="3"
                                   IsChecked="{Binding SelectedTestSettings, Converter={StaticResource NullToBooleanConverter}, Mode=OneWay}"
                                   Content="{x:Static res:Resources.None}" 
                                   Command="{Binding ClearTestSettingsCommand}"/>
                    </StackPanel>
                    <Label Content="{x:Static res:Resources.TestRunners}" VerticalAlignment="Center" Margin="0,12,0,0"/>
                    <ListBox Margin="0,3,0,0" ItemsSource="{Binding TestRunners}" SelectedValue="{Binding SelectedTestRunner}"
                             ItemContainerStyle="{StaticResource RadioButtonItemStyle}"/>                    
                  </StackPanel>
                </ScrollViewer>
              </TabItem>
            </CompositeCollection>
          </TabControl.ItemsSource>
        </TabControl>
      </Grid>
    </DockPanel>
  </Grid>
</views:View>
